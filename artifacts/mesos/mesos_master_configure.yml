##################################
##           HANDLERS           ##
##################################
- handlers:
  - name: restart dnsmasq
    service: name=dnsmasq state=restarted

##################################
##           VARIABLES          ##
##################################
  vars:
    ##############################
    #      DOCKER VARIABLES      #
    ##############################
    docker_bridge_ip: "172.0.17.1"

    ##############################
    #      CONSUL VARIABLES      #
    ##############################
    consul_advertise: "{{ansible_default_ipv4.address}}"
    consul_servers_list: "{{ master_ips }}"
    consul_join_ip: "{{ master_ips[0] }}"
    consul_bootstrap_expect: "{{ consul_servers_list | length }}"
    consul_bootstrap: "{% if ansible_default_ipv4.address == consul_join_ip %}1{% else %}0{% endif %}"
    consul_version: 'latest'
    consul_image: "progrium/consul:{{consul_version}}"

    ##############################
    #      DNSMASK VARIABLES     #
    ##############################
    consul_domain: consul

    ##############################
    #    ZOOKEEPER VARIABLES     #
    ##############################
    zookeeper_version: "latest"
    zookeeper_image: "indigodatacloud/zookeeper:{{zookeeper_version}}"
    zookeeper_client_port: "2181"
    zookeeper_servers_list: "{{ master_ips|join(',') }}"
    zookeeper_id: "{%- for host in master_ips -%}{%- if host == 'default' or host == inventory_hostname or host == ansible_fqdn or host in ansible_all_ipv4_addresses -%}{{ loop.index }}{%- endif -%}{%- endfor -%}"
    zookeeper_peers_nodes: "{% for host in master_ips %}{{host}}:{{zookeeper_client_port}}{% if not loop.last %},{% endif %}{% endfor %}"

    ##############################
    #        MESOS VARIABLES     #
    ##############################
    mesos_cluster_name: "Cluster01"
    mesos_ip: "{{ ansible_eth0.ipv4.address }}"
    mesos_hostname: "{{ ansible_eth0.ipv4.address }}"
    mesos_version: "latest"
    mesos_log_dir: "/var/log"
    mesos_master_image: "indigodatacloud/mesos-master:{{ mesos_version }}"
    mesos_quorum: "{{ ( master_ips|count / 2) | round(0, 'ceil') | int }}"

    ##############################
    #     MARATHON VARIABLES     #
    ##############################
    marathon_version: "latest"
    marathon_hostname: "{{ ansible_eth0.ipv4.address }}"
    marathon_framework_name: "marathon"
    marathon_image: "indigodatacloud/marathon:{{ marathon_version }}"
    marathon_master_peers: "zk://{{ zookeeper_peers_nodes }}/mesos"
    marathon_zk_peers: "zk://{{ zookeeper_peers_nodes }}"
    # Note: marathon-consul checks the certificate CN against the host marathon.service.consul
    openssl_self_signed:
     - { name : "marathon.service.consul" }
    generate_random_pass: "true"
    marathon_key_password: "password"
    marathon_pkcs_password: "password"
    marathon_jks_password: "password"
    marathon_username: "admin"
    marathon_password: "secr3t"
    marathon_https_port: "8443"
    marathon_keystore_path: '/etc/marathon/ssl_keystore.jks'
    marathon_ssl_ks_password: "{%- if generate_random_pass|string() == 'true' -%}{{ marathon_jks_randpassword.stdout }}{%- else -%}{{ marathon_jks_password }}{%- endif -%}"

    ##############################
    #      CHRONOS VARIABLES     #
    ##############################
    chronos_version: "latest"
    chronos_image: "indigodatacloud/chronos:{{ chronos_version }}"
    chronos_hostname: "{{ ansible_default_ipv4.address }}"
    chronos_port: "4400"
    chronos_https_port: "4443"
    chronos_master_peers: "zk://{{ zookeeper_peers_nodes }}/mesos"
    chronos_zk_peers: "zk://{{ zookeeper_peers_nodes }}"
    chronos_framework_name: "chronos"
    openssl_self_signed:
     - { name : "{{ ansible_default_ipv4.address }}" }
    generate_random_pass: "true"
    chronos_key_password: "password"
    chronos_pkcs_password: "password"
    chronos_jks_password: "password"
    chronos_username: "admin"
    chronos_password: "secr3t"
    chronos_keystore_path: '/etc/chronos/ssl_keystore.jks'
    chronos_server_zk_group: {{master_ips}}
    chronos_ssl_ks_password: "{%- if generate_random_pass|string() == 'true' -%}{{ chronos_jks_randpassword.stdout  }}{%- else -%}{{ chronos_jks_password }}{%- endif -%}"

##################################
##            TASKS             ##
##################################
  tasks:
  - name: Configure Mesos Master
    debug: msg="Mesos Master IPs {{master_ips}}"

    ##############################
    #            CONSUL          #
    ##############################
    # INFO
  - name: Consul variables
    debug: msg="Consul image --> {{consul_image}}"
  - name: Consul variables
    debug: msg="Docker bridge IP --> {{docker_bridge_ip}}"
  - name: Consul variables
    debug: msg="Hostname --> {{ansible_hostname}}"
  - name: Consul variables
    debug: msg="Consul advertise --> {{consul_advertise}}"
  - name: Consul variables
    debug: msg="Consul bootstrap expect --> {{consul_bootstrap_expect}}"
  - name: Consul variables
    debug: msg="Consul bootstrap --> {{consul_bootstrap}}"
  - name: Consul variables
    debug: msg="Consul join ip --> {{consul_join_ip}}"
    # RUN CONTAINER
  - name: run consul container with bootstrap
    when: consul_bootstrap == "1"
    docker:
      name: consul
      image: "{{ consul_image }}"
      state: started
      detach: true
      restart_policy: always
      net: "bridge"
      ports:
       - 8300:8300
       - 8301:8301
       - 8301:8301/udp
       - 8302:8302
       - 8302:8302/udp
       - 8400:8400
       - 8500:8500
       - "{{ docker_bridge_ip }}:8600:53"
       - "{{ docker_bridge_ip }}:8600:53/udp"
      hostname: "{{ ansible_hostname }}"
      volumes:
      - /mnt:/data
      command: -server -advertise "{{consul_advertise}}" -bootstrap-expect "{{consul_bootstrap_expect}}" -ui-dir /ui
    # RUN CONTAINER
  - name: run consul container with join ip
    when: consul_bootstrap == "0"
    docker:
      name: consul
      image: "{{ consul_image }}"
      state: started
      detach: true
      restart_policy: always
      net: "bridge"
      ports:
       - 8300:8300
       - 8301:8301
       - 8301:8301/udp
       - 8302:8302
       - 8302:8302/udp
       - 8400:8400
       - 8500:8500
       - "{{ docker_bridge_ip }}:8600:53"
       - "{{ docker_bridge_ip }}:8600:53/udp"
      volumes:
      - /mnt:/data
      hostname: "{{ ansible_hostname }}"
      command: -server -advertise "{{consul_advertise}}" -join "{{consul_join_ip}}" -ui-dir /ui

  ##############################
  #           DNSMASK          #
  ##############################
    # INFO
  - name: DNSMask variables
    debug: msg="Consul domain --> {{consul_domain}}"
  - name: DNSMask variables
    debug: msg="Docker bridge IP --> {{docker_bridge_ip}}"

    # CONFIG
  - name: configure consul resolution dnsmasq
    copy:
      content: "server=/{{ consul_domain }}/{{ docker_bridge_ip }}#8600"
      dest: /etc/dnsmasq.d/10-consul
      owner: root
      group: root
      mode: 0644
    notify:
      - restart dnsmasq
    tags: dnsmasq

  - name: make sure dnsmasq is running
    service:
      name: dnsmasq
      state: started
      enabled: yes
    tags: dnsmasq

  - name: configure docker
    lineinfile:
      dest: /etc/default/docker
      state: present
      insertafter: ^DOCKER_OPTS=.*
      line: "DOCKER_OPTS=\"$DOCKER_OPTS --dns {{ docker_bridge_ip }} --dns 8.8.8.8 --dns-search service.{{ consul_domain }} \""
    notify:
      - restart docker
    tags: dnsmasq

  - meta: flush_handlers

  ##############################
  #          ZOOKEEPER         #
  ##############################
    # INFO
  - name: Zookeeper variables
    debug: msg="Zookeeper image --> {{zookeeper_image}}"
  - name: Zookeeper variables
    debug: msg="Zookeeper id --> {{zookeeper_id}}"
  - name: Zookeeper variables
    debug: msg="Zookeeper servers --> {{zookeeper_servers_list}}"
    # RUN CONTAINER
  - name: run zookeeper container
    docker:
      name: zookeeper
      image: "{{ zookeeper_image }}"
      state: started
      detach: true
      net: "host"
      env:
        MYID: "{{ zookeeper_id }}"
        SERVERS: "{{ zookeeper_servers_list }}"
      restart_policy: always
    tags: zookeeper
    # REGISTER SERVICE IN CONSUL
  - name: register zookeeper service
    consul:
      service_name: zookeeper
      service_port: 2181
      tags: zookeeper

  ##############################
  #     START MESOS MASTER     #
  ##############################

    # INFO
  - name: Mesos master variables
    debug: msg="Mesos image --> {{mesos_master_image}}"
  - name: Mesos master variables
    debug: msg="Mesos hostname --> {{mesos_hostname}}"
  - name: Mesos master variables
    debug: msg="Mesos ip --> {{mesos_ip}}"
  - name: Mesos master variables
    debug: msg="Mesos cluster --> {{mesos_cluster_name}}"
  - name: Mesos master variables
    debug: msg="Mesos zk --> zk://{{zookeeper_peers_nodes}}/mesos"
  - name: Mesos master variables
    debug: msg="Mesos log dir --> {{mesos_log_dir}}"
  - name: Mesos master variables
    debug: msg="Mesos quorum --> {{mesos_quorum}}"

    # RUN CONTAINER
  - name: run mesos-master container
    docker:
      name: mesos-master
      image: "{{ mesos_master_image }}"
      detach: true
      state: started
      net: "host"
      restart_policy: always
      env:
        MESOS_HOSTNAME: "{{ mesos_hostname }}"
        MESOS_IP: "{{ mesos_ip }}"
        MESOS_CLUSTER: "{{ mesos_cluster_name }}"
        MESOS_ZK: "zk://{{ zookeeper_peers_nodes }}/mesos"
        MESOS_LOG_DIR: "{{ mesos_log_dir }}"
        MESOS_QUORUM: "{{ mesos_quorum }}"
    tags:
    - mesos-master

  ##############################
  #           MARATHON         #
  ##############################

    # INFO
  - name: Marathon variables
    debug: msg="Marathon hostname --> {{ marathon_hostname }}"
  - name: Marathon variables
    debug: msg="Marathon http address --> {{ marathon_hostname }}"
  - name: Marathon variables
    debug: msg="Marathon master --> {{marathon_master_peers}}"
  - name: Marathon variables
    debug: msg="Marathon zk --> {{ marathon_zk_peers }}/{{ marathon_framework_name }}"
  - name: Marathon variables
    debug: msg="Marathon zk --> {{ marathon_framework_name }}"
  - name: Marathon variables
    debug: msg="Marathon HTTPS Port --> {{ marathon_https_port }}"
  - name: Marathon variables
    debug: msg="Marathon SSL Ks Password --> {{ marathon_ssl_ks_password }}"
  - name: Marathon variables
    debug: msg="Marathon Keystore Path --> {{marathon_keystore_path}}"
  - name: Marathon variables
    debug: msg="Marathon Http Credentials --> {{marathon_username}}:{{marathon_password}}"

    # GENERATE PASSWORDS
  - name: generate marathon key password
    shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c10
    register: marathon_key_randpassword
    when: generate_random_pass == "true"

  - name: generate marathon jks password
    shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c10
    register: marathon_jks_randpassword
    when: generate_random_pass == "true"

    # ENABLE SSL
  - name: generate keystore with random password
    vars:
      key_password: "{{marathon_key_randpassword.stdout}}"
      pkcs_password: "{{marathon_jks_randpassword.stdout}}"
      jks_password: "{{marathon_jks_randpassword.stdout}}"
    include: https://raw.githubusercontent.com/alpegon/tosca-types/mesos-recipes/artifacts/mesos/enable_marathon_ssl.yml
    when: generate_random_pass == "true"

  - name: generate keystore
    vars:
      key_password: "{{marathon_key_password}}"
      pkcs_password: "{{marathon_jks_password}}"
      jks_password: "{{marathon_jks_password}}"
    include: https://raw.githubusercontent.com/alpegon/tosca-types/mesos-recipes/artifacts/mesos/enable_marathon_ssl.yml
    when: generate_random_pass != "true"

    # RUN CONTAINER
  - name: run marathon container
    docker:
      name: marathon
      image: "{{ marathon_image }}"
      state: started
      detach: true
      restart_policy: always
      net: "host"
      volumes:
      - "{{ marathon_keystore_path }}:{{ marathon_keystore_path }}"
      env:
        MARATHON_HOSTNAME: "{{ marathon_hostname }}"
        MARATHON_HTTP_ADDRESS: "{{ marathon_hostname }}"
        MARATHON_HTTPS_ADDRESS: "{{ marathon_hostname }}"
        MARATHON_MASTER: "{{ marathon_master_peers }}"
        MARATHON_ZK: "{{ marathon_zk_peers }}/{{ marathon_framework_name }}"
        MARATHON_FRAMEWORK_NAME: "{{ marathon_framework_name }}"
        MARATHON_HTTPS_PORT: "{{ marathon_https_port }}"
        MARATHON_SSL_KEYSTORE_PASSWORD: "{{ marathon_ssl_ks_password }}"
        MARATHON_SSL_KEYSTORE_PATH: "{{ marathon_keystore_path }}"
        MARATHON_HTTP_CREDENTIALS: "{{marathon_username}}:{{marathon_password}}"
    tags: marathon

  - name: register marathon service with curl check
    consul:
      service_name: marathon
      service_port: "{{marathon_https_port}}"
      script: "curl -k -u {{marathon_username}}:{{marathon_password}} https://{{marathon_hostname}}:{{marathon_https_port}}"
      interval: 10s
      tags: marathon

    # RUN CONTAINER
  - wait_for: port="{{marathon_https_port}}" host=marathon.service.consul delay=6 timeout=60

  ##############################
  #           CHRONOS          #
  ##############################

    # INFO
  - name: Chronos variables
    debug: msg="Chronos image --> {{ chronos_image }}"
  - name: Chronos variables
    debug: msg="Chronos hostname --> {{ chronos_hostname }}"
  - name: Chronos variables
    debug: msg="Chronos port --> {{chronos_port}}"
  - name: Chronos variables
    debug: msg="Chronos master peers --> {{ chronos_master_peers }}"
  - name: Chronos variables
    debug: msg="Chronos zk peers --> {{ chronos_zk_peers }}"
  - name: Chronos variables
    debug: msg="Chronos zk path --> /{{ chronos_framework_name }}/state"
  - name: Chronos variables
    debug: msg="Chronos chronos framework name --> {{ chronos_framework_name }}"
  - name: Chronos variables
    debug: msg="Chronos HTTPS Port --> {{ chronos_https_port }}"
  - name: Chronos variables
    debug: msg="Chronos SSL Ks Password --> {{ chronos_ssl_ks_password }}"
  - name: Chronos variables
    debug: msg="Chronos Keystore Path --> {{chronos_keystore_path}}"
  - name: Chronos variables
    debug: msg="Chronos Http Credentials --> {{chronos_username}}:{{chronos_password}}"

  # GENERATE PASSWORDS
  - name: generate chronos key password
    shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c10
    register: chronos_key_randpassword
    when: generate_random_pass == "true"

  - name: generate chronos jks password
    shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c10
    register: chronos_jks_randpassword
    when: generate_random_pass == "true"

    # ENABLE SSL
  - name: generate keystore with random password
    vars:
      key_password: "{{chronos_key_randpassword.stdout}}"
      pkcs_password: "{{chronos_jks_randpassword.stdout}}"
      jks_password: "{{chronos_jks_randpassword.stdout}}"
    include: https://raw.githubusercontent.com/alpegon/tosca-types/mesos-recipes/artifacts/mesos/enable_chronos_ssl.yml
    when: generate_random_pass == "true"

  - name: generate keystore
    vars:
      key_password: "{{chronos_key_password}}"
      pkcs_password: "{{chronos_jks_password}}"
      jks_password: "{{chronos_jks_password}}"
    include: https://raw.githubusercontent.com/alpegon/tosca-types/mesos-recipes/artifacts/mesos/enable_chronos_ssl.yml
    when: generate_random_pass != "true"

    # RUN CONTAINER
  - name: run chronos container
    docker:
      name: chronos
      image: "{{ chronos_image }}"
      state: started
      detach: true
      restart_policy: always
      net: "host"
      volumes:
      - "{{ chronos_keystore_path }}:{{ chronos_keystore_path }}"
      env:
        CHRONOS_HOSTNAME: "{{ chronos_hostname }}"
        CHRONOS_HTTP_PORT: "{{ chronos_port }}"
        CHRONOS_MASTER: "{{ chronos_master_peers }}"
        CHRONOS_ZK_HOSTS: "{{ chronos_zk_peers }}"
        CHRONOS_ZK_PATH: "/{{ chronos_framework_name }}/state"
        CHRONOS_MESOS_FRAMEWORK_NAME: "{{ chronos_framework_name }}"
        CHRONOS_HTTPS_PORT: "{{ chronos_https_port }}"
        CHRONOS_SSL_KEYSTORE_PASSWORD: "{{ chronos_ssl_ks_password }}"
        CHRONOS_SSL_KEYSTORE_PATH: "{{ chronos_keystore_path }}"
        CHRONOS_HTTP_CREDENTIALS: "{{chronos_username}}:{{chronos_password}}"
