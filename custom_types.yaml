tosca_definitions_version: tosca_simple_yaml_1_0

# Standard types defined in TOSCA with interfaces to install

tosca.nodes.Database.MySQL:
  derived_from: tosca.nodes.Database
  requirements:
    - host:
        capability: tosca.capabilities.Container
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.DBMS.MySQL
  interfaces:
    Standard:
      create:
        implementation: mysql/mysql_db_configure.yml
        inputs:
          db_password: { get_property: [ SELF, password ] }
          db_name: { get_property: [ SELF, name ] }
          db_user: { get_property: [ SELF, user ] }
          db_root_password: ""
          db_access_host: "%"
         
tosca.nodes.DBMS.MySQL:
  derived_from: tosca.nodes.DBMS
  properties:
    port:
      type: integer
      description: reflect the default MySQL server port
      default: 3306
    root_password:
      type: string
      # MySQL requires a root_password for configuration
      required: true
  capabilities:
    # Further constrain the ‘host’ capability to only allow MySQL databases
    host:
      type: tosca.capabilities.Container
      valid_source_types: [ tosca.nodes.Database.MySQL ]
  interfaces:
    Standard:
      create: mysql/mysql_install.yml
      configure:
        implementation: mysql/mysql_configure.yml
        inputs:
          root_password: { get_property: [ SELF, root_password ] }
          port: { get_property: [ SELF, port ] }
         
tosca.nodes.WebServer.Apache:
  derived_from: tosca.nodes.WebServer
  interfaces:
    Standard:
      create: 
        implementation: apache/apache_install.yml
      start:
        implementation: apache/apache_start.yml

# INDIGO non normative types

tosca.nodes.indigo.Database.MySQL:
  derived_from: tosca.nodes.Database.MySQL
  properties:
    access_host:
      type: string
      required: no
      default: "%"
    root_password:
      type: string
      required: true
  requirements:
    - host:
        capability: tosca.capabilities.Container
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.DBMS.MySQL
  interfaces:
    Standard:
      create:
        implementation: mysql/mysql_db_configure.yml
        inputs:
          db_password: { get_property: [ SELF, password ] }
          db_name: { get_property: [ SELF, name ] }
          db_user: { get_property: [ SELF, user ] }
          db_root_password: { get_property: [ SELF, root_password ] }
          db_access_host: { get_property: [ SELF, access_host ] }

tosca.capabilities.indigo.Scalable:
  derived_from: tosca.capabilities.Scalable
  properties:
    min_instances:
      type: integer
      default: 1
      required: no
    max_instances:
      type: integer
      default: 1
      required: no
    count:
      type: integer
      description: the number of resources
      required: no
      defailt: 1
    removal_list:
      type: list
      description: list of IDs of the resources to be removed
      required: no
      entry_schema:
        type: string

tosca.nodes.indigo.Compute:
  derived_from: tosca.nodes.Compute
  properties:
    public_ip:
      type: boolean
      required: no
      default: no
  capabilities:
    scalable:
      type: tosca.capabilities.indigo.Scalable

tosca.nodes.indigo.GalaxyPortal:
  derived_from: tosca.nodes.WebServer
  properties:
    admin:
      type: string
      description: email of the admin user
      default: admin@admin.com
      required: false
    admin_api_key:
      type: string
      description: key to access the API with admin role
      default: not_very_secret_api_key
      required: false
    user:
      type: string
      description: username to launch the galaxy daemon
      default: galaxy
      required: false
    install_path:
      type: string
      description: path to install the galaxy tool
      default: /home/galaxy/galaxy
      required: false
  requirements:
    - host:
        capability: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
  interfaces:
    Standard:
      create: 
        implementation: galaxy/galaxy_install.yml
        inputs:
          galaxy_install_path: { get_property: [ SELF, install_path ] }
      configure:
        implementation: galaxy/galaxy_configure.yml
        inputs:
          galaxy_user: { get_property: [ SELF, user ] }
          galaxy_install_path: { get_property: [ SELF, install_path ] }
          galaxy_admin: { get_property: [ SELF, admin ] }
          galaxy_admin_api_key: { get_property: [ SELF, admin_api_key ] }
      start:
        implementation: galaxy/galaxy_start.yml
        inputs:
          galaxy_user: { get_property: [ SELF, user ] }
          galaxy_install_path: { get_property: [ SELF, install_path ] }

          
tosca.nodes.indigo.GalaxyShedTool:
  derived_from: tosca.nodes.WebApplication
  properties:
    name:    
      type: string
      description: name of the tool
      required: true
    owner:    
      type: string
      description: developer of the tool
      required: true
    tool_panel_section_id:    
      type: string
      description: panel section to install the tool
      required: true
  requirements:
    - host:
        capability: tosca.capabilities.Container
        node: tosca.nodes.indigo.GalaxyPortal
        relationship: tosca.relationships.HostedOn
  interfaces:
    Standard:
      create:
        implementation: galaxy/galaxy_tools_configure.yml
        inputs:
          galaxy_install_path: { get_property: [ HOST, install_path ] }
          galaxy_admin_api_key: { get_property: [ HOST, admin_api_key ] }
          galaxy_tool_name: { get_property: [ SELF, name ] }
          galaxy_tool_owner: { get_property: [ SELF, owner ] }
          galaxy_tool_panel_section_id: { get_property: [ SELF, tool_panel_section_id ] }


tosca.capabilities.indigo.LRMS:
  derived_from: tosca.capabilities.Root
  properties:
    type:
      type: string
      required: true
      constraints:
      - valid_values: [ torque, slurm, sge, condor, mesos ]
      
tosca.capabilities.indigo.LRMS.Torque:
  derived_from: tosca.capabilities.indigo.LRMS
  properties:
    type: 
      type: string
      required: true
      default: torque
      constraints:
        - equal: torque
 
tosca.nodes.indigo.ElasticCluster:
  derived_from: tosca.nodes.Root
  properties:
    secret_token:
      type: string
      description: Token to access CLUES web interface
      default: not_very_secret_token
      required: false
    deployment_id:
      type: string
      description: ID of the deployment of this elastic cluster in the orchestrator 
      required: false
  interfaces:
    Standard:
      create: ec3/ec3_install.yml
      configure:
        implementation: ec3/ec3_configure.yml
        inputs:
          clues_secret_token: { get_property: [ SELF, secret_token ] }
          clues_queue_system: { get_property: [ SELF, lrms, type ] }
          ec3_max_instances: { get_property: [ SELF, wn, max_instances] }
          ec3_deployment_id: { get_property: [ SELF, deployment_id] }
      start: ec3/ec3_start.yml
  requirements:
    - wn:
        capability: tosca.capabilities.Scalable
        node: tosca.nodes.indigo.LRMS.WorkerNode
        relationship: tosca.relationships.indigo.Manages
    - lrms:
        capability: tosca.capabilities.indigo.LRMS
        node: tosca.nodes.indigo.LRMS.FrontEnd
        relationship: tosca.relationships.HostedOn


tosca.nodes.indigo.LRMS.WorkerNode:
  derived_from: tosca.nodes.SoftwareComponent
  capabilities:
      wn:
        type: tosca.capabilities.Scalable
        valid_source_types: [tosca.nodes.indigo.ElasticCluster]
  requirements:
    - host:
        capability: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
        
tosca.nodes.indigo.LRMS.WorkerNode.Torque:
  derived_from: tosca.nodes.indigo.LRMS.WorkerNode
  interfaces:
    Standard:
      create: lrms/torque/torque_wn_install.yml
      configure: lrms/torque/torque_wn_configure.yml
      start: lrms/torque/torque_wn_start.yml

tosca.nodes.indigo.LRMS.FrontEnd:
  derived_from: tosca.nodes.SoftwareComponent
  capabilities:
      lrms:
        type: tosca.capabilities.indigo.LRMS
  requirements:
    - host:
        capability: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn

tosca.nodes.indigo.LRMS.FrontEnd.Torque:
  derived_from: tosca.nodes.indigo.LRMS.FrontEnd
  capabilities:
      lrms:
        type: tosca.capabilities.indigo.LRMS.Torque
  interfaces:
    Standard:
      create: lrms/torque/torque_fe_install.yml
      configure: lrms/torque/torque_fe_configure.yml
      start: lrms/torque/torque_fe_start.yml
 
tosca.relationships.indigo.Manages:
  derived_from: tosca.relationships.Root


tosca.artifacts.Implementation.YAML:
  derived_from: tosca.artifacts.Implementation
  description: YAML Ansible recipe artifact
  mime_type: text/yaml
  file_ext: [ yaml, yml ]  

# Docker types from TOSCA standard not in tosca-parser

tosca.capabilities.Container.Docker:
  derived_from: tosca.capabilities.Container
  properties:
    version:
      type: list
      required: false
      entry_schema:
        type: version
    publish_all:
      type: boolean
      default: false
      required: false
    publish_ports:
      type: list
      entry_schema:
        type: PortSpec
      required: false
    expose_ports:
      type: list
      entry_schema:
        type: PortSpec
      required: false
    volumes:
      type: list
      entry_schema: 
        type: string
      required: false
      
tosca.nodes.Container.Application.Docker:
  derived_from: tosca.nodes.Container.Application
  requirements:
    - host:
        capability: tosca.capabilities.Container.Docker
        
tosca.nodes.Container.Application:
  derived_from: tosca.nodes.Root
  requirements:
    - host:
        capability: tosca.capabilities.Container
        node: tosca.nodes.Container
        relationship: tosca.relationships.HostedOn
        

tosca.nodes.Container.Runtime:
  derived_from: tosca.nodes.SoftwareComponent
  capabilities:
    host:
      type: tosca.capabilities.Container
    scalable:
      type: tosca.capabilities.Scalable
      
######################################################################################

tosca.nodes.indigo.Container.Runtime.Docker:
  derived_from: tosca.nodes.SoftwareComponent
  capabilities:
    host:
      type: tosca.capabilities.Container.Docker
    scalable:
      type: tosca.capabilities.Scalable
      
tosca.nodes.indigo.Container.Application.Docker:
  derived_from: tosca.nodes.Container.Application.Docker
  properties:
    command:
      required: yes
      type: string
    uris:
      required: no
      type: list
      entry_schema:
        type: string
      
tosca.nodes.indigo.Container.Application.Docker.Chronos:
  derived_from: tosca.nodes.indigo.Container.Application.Docker
  properties:
    schedule:
      required: no
      type: string
        
tosca.nodes.indigo.Container.Application.Docker.Marathon:
  derived_from: tosca.nodes.indigo.Container.Application.Docker
